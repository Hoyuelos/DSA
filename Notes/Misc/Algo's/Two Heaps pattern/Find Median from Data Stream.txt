295. Find Median from Data Stream

The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.


----------------------------------------------------------------------


Brute force - 

Maintain a sorted list and return the median whenever requested. 

Time complexity - O(N)


class MedianFinder {

    private List<Integer> list = new ArrayList<>();

    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        if(list.size()==0)  list.add(num);
        else{
            int i=0;
            while(i<list.size()){
                if(list.get(i)>=num)    break;
                i++;
            }
            list.add(i,num);
        }
    }
    
    public double findMedian() {
        int n = list.size();
        if(n%2!=0)  return list.get(n/2);
        else    return (list.get(n/2)+list.get(n/2-1))/2.0;
    }
}


----------------------------------------------------------------------


Better approach - 

Use two heaps - one to store lower half of numbers (before the median - max heap) and the other to store the upper half of numbers (after the median - min heap).

We have to maintain the size of both the heaps. 

Choose any one heap that can have its size greater than the other one by 1. (We choose max heap)

We will be rebalancing the heaps if the size criterion is violated at any time.
(I.e. if min_heap_size>max_heap_size or max_heap_size> min_heap_size+1)



class MedianFinder {
    PriorityQueue<Integer> lower = new PriorityQueue<>(Collections.reverseOrder());
    PriorityQueue<Integer> upper = new PriorityQueue<>();
    // we will keep the size of the lower in range [upper.size, upper.size+1]
    int cnt=0;

    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        cnt++;
        if(lower.size()==0 && upper.size()==0)  lower.add(num);
        else{
            if(num>lower.peek())    upper.add(num);
            else                    lower.add(num);
            if(lower.size()>upper.size()+1){
                upper.add(lower.poll());
            }
            if(upper.size()>lower.size()){
                lower.add(upper.poll());
            }
        }
    }
    
    public double findMedian() {
        if(cnt%2!=0)    return lower.peek();
        return (lower.peek() + upper.peek())/2.0;
    }
    
}


