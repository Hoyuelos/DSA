Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.


https://leetcode.com/problems/132-pattern/


___________________________________________________________________________________________


This is an interesting problem to solve in less than equal to blogs time.

In arrays, if we have to solve a problem in O(n) time, then often concept of Monotonic queue (MQ) helps.

(I.e. using a stack/queue/dequeue).

In this, we will be creating a decreasing MQ from right to left. (Think why increasing MQ from left to right will not work here)

If we encounter a number greater that top of our MQ, we will remove top until it is greater than the current element (to maintain the monotonicity). - and the last element popped will be our 'two' (in 132 pattern).

So now we need to find an element smaller than 'two'. (We might update this 'two')






class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        
        st.push(nums[n-1]);
        int two=0;
        boolean twoFound=false;
        for(int i=n-2;i>=0;i--){ 
            if(twoFound && nums[i]<two) return true;           
            while(st.size()>0 && nums[i]>st.peek()){
                two = st.pop();
                twoFound = true;
            }
            st.push(nums[i]);            
        }

        return false;        
    }
}