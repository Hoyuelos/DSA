Find All Anagrams in a String


Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


https://leetcode.com/problems/find-all-anagrams-in-a-string/description/

------------------------------------------------------------------------------------------------



O(n) approach - 


Here we are maintaining an hash map. And checking it the size of the hash map becomes zero or not.

We will initialize the map with the chars(count) of 'p' string. 

While iterating through 's' we as we put char in and out of the window, we do the following operation - 
1. If we move a element out of the window - we add one to the count in the map
2. If we move an element into the window - we subtract 1 from the count in the map.
Also, we check if at any time the count is zero then we delete that entry. 
(This is done because we can just check if map.size()==0 when we find a anagram, instead of iterating the entire hash map.)



class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        if(p.length()>s.length())   return new ArrayList<>();
        Map<Character,Integer> map = new HashMap<>();

        for(int i=0;i<p.length();i++){
            char ch = p.charAt(i);
            if(map.get(ch)==null)   map.put(ch,1);
            else                    map.put(ch, map.get(ch)+1);
        }

        for(int i=0;i<p.length();i++){
            char ch = s.charAt(i);
            if(map.get(ch)!=null)   map.put(ch, map.get(ch)-1);
            else                    map.put(ch, -1);
            if(map.get(ch)==0)      map.remove(ch);
        }

        
        int l=0,r=p.length()-1;

        List<Integer> res = new ArrayList<>();

        while(r < s.length()){
            //System.out.println(l + " " + r + " " + map.size());
            if(map.size()==0)   res.add(l);

            char leftch = s.charAt(l);
            if(map.get(leftch)==null)   map.put(leftch,1);
            else                        map.put(leftch, map.get(leftch)+1);
            if(map.get(leftch)==0)      map.remove(leftch);
            l++;

            r++;
            if(r==s.length()) break;
            char rightch = s.charAt(r);
            if(map.get(rightch)==null)  map.put(rightch, -1);
            else                        map.put(rightch, map.get(rightch)-1);
            if(map.get(rightch)==0)      map.remove(rightch);            

        }

        return res;
    }
}