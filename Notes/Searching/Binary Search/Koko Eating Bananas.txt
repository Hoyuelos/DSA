Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

https://leetcode.com/problems/koko-eating-bananas/


-------------------------------------------------------------------------------------------


1 <= piles.length <= 10^4 - can go upto O(n^2)
1 <= piles[i] <= 10^9

Based on problem constraints we can say that range of 'k' will be -
1 <= k <= max(piles) (max can be 10^9)
Thus we need to find a minimum 'k' which can ensure that all bananas can be eaten. 

The brute force approach will be to check every value in the range starting from 1 and check if this value is feasible and return the first feasible value. 
Worst-case time complexity - (10^9)*(operations to check feasibility)


Since the range is in sorted order, we can use binary search to reduce the time complexity.
As in this, we don't have to traverse the entire range. 


Below is the solution based on binary search -


class Solution {
    public int minEatingSpeed(int[] arr, int h) {
        int n = arr.length;
        int max = max(arr);
        int k = Integer.MAX_VALUE;
        int l=1,r=max;        

        while(l<=r){
            int mid = (l+r)/2;            
            if(isManageable(arr, mid, h)){
                k = Math.min(k, mid);
                r = mid-1;
            }else{
                l = mid+1;
            }
        }

        return k;
    }

    public boolean isManageable(int arr[], int k, int h){       
        int cnt=0;        
        for(int i=0;i<arr.length;i++){
            if(arr[i]%k==0)
                cnt += arr[i]/k;
            else
                cnt += (arr[i]/k)+1;
        }
        return cnt>=0 && cnt<=h;
    }

    public int max(int arr[]){
        int max=arr[0];
        for(int i=1;i<arr.length;i++)
            if(arr[i]>max)  max = arr[i];
        return max;
    }
}

