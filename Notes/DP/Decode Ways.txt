Decode Ways

A message containing letters from A-Z can be encoded into numbers using the following mapping:

To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

https://leetcode.com/problems/decode-ways/

___________________________________________________________________________________________________


Brute force - 

Using backtracking check all the possible combinations and decode each one of them.

Time complexity - 2^n


class Solution {
    int cnt=0;
    public int numDecodings(String st) {
        int n = st.length(); // 10^2 <= n^4
        if(st.charAt(0)=='0')   return 0;
        recur(st,n,0);
        return cnt;
    }

    public void recur(String st, int n, int ind){

        if(ind==n){
            cnt++;
            return;
        }

        if(ind==n-1 || st.charAt(ind+1)!='0')
            recur(st,n,ind+1);
        
        if(ind<n-1 && Integer.parseInt(st.substring(ind,ind+2))<=26 ){
            if((ind+2<n && st.charAt(ind+2)!='0') || ind+2==n)
                recur(st,n,ind+2);
        }
    }
}


------------------------------------------------------------------------------------------------


Optimised solution - 

1)

Observe that in the above brute force solution, there are many repetitive subproblems. 
Ex - 11[...]  (lets say 11234)
Here, we will reach to a subproblem ([...]) from two paths - 1 and 11. (ie if 'aa...' Or 'k...')
So when we first arrived at this subproblem, why not save it in a cache and directly use it when we arrive here again ----> Top down approach or Memoization.


We can get its code with only a slight change in the recursion code - saving each state in a Hashmap. And checking the map first whenever we arrive at some state.



class Solution {

    Map<Integer, Integer> map = new HashMap<>();

    public int numDecodings(String st) {
        int n = st.length(); // 10^2 <= n^4
        if(st.charAt(0)=='0')   return 0;
        return recur(st,n,0);        
    }

    public int recur(String st, int n, int ind){

        if(ind==n){            
            return 1;
        }

        if(map.get(ind)!=null)  return map.get(ind);

        int cnt=0;
        if(ind==n-1 || st.charAt(ind+1)!='0')
            cnt = recur(st,n,ind+1);
        
        if(ind<n-1 && Integer.parseInt(st.substring(ind,ind+2))<=26 ){
            if((ind+2<n && st.charAt(ind+2)!='0') || ind+2==n)
                cnt += recur(st,n,ind+2);
        }

        map.put(ind, cnt);
        return cnt;
    }
}


------------------------------------------------------------------------------------------------

2)

This can also be solved using the bottom-up approach. In this, we first solve a subproblem and then use its result to solve a bigger problem.
So the main idea is to correctly identify the subproblems 

(To identify subproblems - take a look at the recursion tree of the brute force approach. And identify which nodes are we visiting again and again - those are the repetitive subproblems. Now solve these first and then proceed to the bigger problem)


class Solution {
    public int numDecodings(String s) {
        // 11106
        // 21101_ 
        int n = s.length();
        int ref[] = new int[n+1];
        
        if(s.charAt(n-1)=='0')  ref[n-1]=0;
        else                    ref[n-1] = 1;                   
        ref[n]=1;
            
        for(int i=n-2;i>=0;i--){
            if(s.charAt(i)=='0'){
                ref[i]=0;
                continue;
            }
            
            int cnt=0;
            if(ref[i+1]>0)  cnt += ref[i+1];                

            if(Integer.valueOf(s.substring(i,i+2))<=26){
                cnt += ref[i+2];
            }
            ref[i] = cnt;
        }
        
        return ref[0];
    }
}


