Longest Common Subsequence

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.


https://leetcode.com/problems/longest-common-subsequence/description/

____________________________________________________________________________________



Brute force - 

Backtracking - 


We will be checking all common subsequences and find the one with max length.


class Solution {
    
    public int longestCommonSubsequence(String s1, String s2) {
        
        return recur(s1,0,s2,0);        
    }

    public int recur(String s1, int ind1, String s2, int ind2){
        
        if(ind1==s1.length() || ind2==s2.length())  return 0;

        int res=0;
        int max=0;
        for(int i=ind1;i<s1.length();i++){

            char s1_i = s1.charAt(i);
            int ind = s2.indexOf(s1_i, ind2);
            if(ind!=-1){
                res = 1 + recur(s1,i+1,s2,ind+1);
                max = Math.max(max, res);
            }
        }

        return max;
    }
}



------------------------------------------------------------------------------------------


Dynamic Programming - 

Memoization - 



class Solution {
    
    int mat[][];
    public int longestCommonSubsequence(String s1, String s2) {
        mat = new int[s1.length()][s2.length()];
        for(int i=0;i<s1.length();i++)
            Arrays.fill(mat[i],-1);
        return recur(s1,0,s2,0);        
    }

    public int recur(String s1, int ind1, String s2, int ind2){
        
        if(ind1==s1.length() || ind2==s2.length())  return 0;

        if(mat[ind1][ind2]!=-1)  return mat[ind1][ind2];      

        int res=0;
        int max=0;
        for(int i=ind1;i<s1.length();i++){

            char s1_i = s1.charAt(i);
            int ind = s2.indexOf(s1_i, ind2);
            if(ind!=-1){
                res = 1 + recur(s1,i+1,s2,ind+1);
                max = Math.max(max, res);
            }
        }

        mat[ind1][ind2] = max;
        return max;
    }
}



------------------------------------------------------------------------------------------------


Bottom-Up approach -

Since we have identified repetitive subproblems from our recursion tree, we can solve this in a bottom-up fashion by solving those subproblems first.




class Solution {
    
    int mat[][];
    public int longestCommonSubsequence(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        mat = new int[n][m];

        int max=0;          // to return the max number from our matrix
        if(s1.charAt(n-1)==s2.charAt(m-1))  mat[n-1][m-1]=1;
        if(mat[n-1][m-1]>max) max = mat[n-1][m-1];

        for(int j=m-2;j>=0;j--){
            if(s1.charAt(n-1)==s2.charAt(j) || mat[n-1][j+1]==1)    mat[n-1][j]=1;
            if(mat[n-1][j]>max) max = mat[n-1][j];
        }

        for(int i=n-2;i>=0;i--){
            if(s1.charAt(i)==s2.charAt(m-1) || mat[i+1][m-1]==1)    mat[i][m-1]=1;
            if(mat[i][m-1]>max) max = mat[i][m-1];
        }

        for(int i=n-2;i>=0;i--){
            for(int j=m-2;j>=0;j--){
                if(s1.charAt(i)==s2.charAt(j)){
                    mat[i][j] = 1 + mat[i+1][j+1];
                }else{
                    mat[i][j] = Math.max(mat[i][j+1], mat[i+1][j]);
                }

                if(mat[i][j]>max)   max = mat[i][j];
            }
        }

        return max;
             
    }
    
}