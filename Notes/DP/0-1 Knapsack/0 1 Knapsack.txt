We are given N items where each item has some weight and profit associated with it. We are also given a bag with capacity W, [i.e., the bag can hold at most W weight in it]. The target is to put the items into the bag such that the sum of profits associated with them is the maximum possible. 



Brute force approach - 

Backtracking-

Here, we will try every combination.
For each object we have two choices if its weight is less than the available capacity - 
1. Pick it 
2. Drop it



    public int knapSack(int W, int wt[], int val[], int n)
    {
        // Base Case
        if (n == 0 || W == 0)
            return 0;
 
        // If weight of the nth item is
        // more than Knapsack capacity W,
        // then this item cannot be included
        // in the optimal solution
        if (wt[n - 1] > W)
            return knapSack(W, wt, val, n - 1);
 
        // Return the maximum of two cases:
        // (1) nth item included
        // (2) not included
        else
            return max(val[n - 1]
                           + knapSack(W - wt[n - 1], wt,
                                      val, n - 1),
                       knapSack(W, wt, val, n - 1));
    }


------------------------------------------------------------------------------------


Dynamic programming - 

From our recursion tree we can see that there are multiple overlapping subproblems (we can reach index 'ind' with the same available capacity multiple times).
Therefore we will save the result of the subproblems in a cache and use it again if required ( Each state is identified by index and available capacity)


Memoization - 


    int knapSackRec(int W, int wt[], int val[],
                           int n, int[][] dp)
    {
 
        // Base condition
        if (n == 0 || W == 0)
            return 0;
 
        if (dp[n][W] != -1)
            return dp[n][W];
 
        if (wt[n - 1] > W)
 
            // Store the value of function call
            // stack in table before return
            return dp[n][W]
                = knapSackRec(W, wt, val, n - 1, dp);
 
        else
 
            // Return value of table after storing
            return dp[n][W]
                = max((val[n - 1]
                       + knapSackRec(W - wt[n - 1], wt, val,
                                     n - 1, dp)),
                      knapSackRec(W, wt, val, n - 1, dp));
    }


------------------------------------------------------------------------------------



Bottom-Up approach - 


To avoid recursive calls, we can approach in a bottom-up fashion, solving the subproblems first (which are identified from our recursion tree), and using its result to solve bigger problem


static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int mat[][] = new int[W+1][n];
        
        for(int i=1;i<=W;i++)
            if(wt[n-1]>i)   mat[i][n-1] = 0;
            else            mat[i][n-1] = val[n-1];
            
        for(int j=n-2;j>=0;j--){
            for(int i=1;i<=W;i++){
                if(wt[j]>i) mat[i][j] = mat[i][j+1];
                else{
                    mat[i][j] = Math.max(mat[i][j+1], val[j]+mat[i-wt[j]][j+1]);
                }
            }
        }
        
        
        int max = 0;
        for(int i=1;i<=W;i++)
            if(mat[i][0]>max)   max = mat[i][0];
            
        return max;
    } 
