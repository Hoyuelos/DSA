133. Clone Graph

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}


https://leetcode.com/problems/clone-graph/description/?envType=list&envId=puuzzmhm

------------------------------------------------------------------------------------



/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    int vis[] = new int[101];
    Node ref[] = new Node[101];
    public Node cloneGraph(Node node) {
        if(node==null)  return null;
        Node h = new Node(node.val);
        ref[node.val] = h;
        dfs(node,h);
        return h;
    }

    public void dfs(Node n1, Node n2){
        vis[n1.val] = 1;

        for(Node n:n1.neighbors){
            if(vis[n.val]==0){
                // forward edge
                Node node = new Node(n.val);
                ref[n.val] = node;
                n2.neighbors.add(node);
                dfs(n,node);
            }else{
                // cross-edge and back-edge
                n2.neighbors.add(ref[n.val]);
            }
            
        }

        vis[n1.val] = 2; 
    }
}