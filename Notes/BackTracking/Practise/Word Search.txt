Word Search

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.


https://leetcode.com/problems/word-search/description/

__________________________________________________________________________________________



Backtracking solution - 


Time complexity - 



class Solution {
    int n=0,m=0;
    public boolean exist(char[][] mat, String st) {
        n = mat.length;
        m = mat[0].length;

        boolean vis[][] = new boolean[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j] == st.charAt(0) && dfs(mat,vis,i,j,st,0))
                    return true;
            }
        }

        return false;

    }

    public boolean dfs(char mat[][], boolean vis[][], int i, int j, String st, int ind){
        // this state means that mat[i][j] is same as st.charAt(ind). and through dfs we will search for further matches in the string.

        if(ind==st.length()-1)    return true;

        vis[i][j] = true;

        //right
        if(j+1<m && st.charAt(ind+1)==mat[i][j+1] && !vis[i][j+1] && dfs(mat,vis,i,j+1,st,ind+1))
            return true;

        //left
        if(j-1>=0 && st.charAt(ind+1)==mat[i][j-1] && !vis[i][j-1] && dfs(mat,vis,i,j-1,st,ind+1))
            return true;

        //up
        if(i-1>=0 && st.charAt(ind+1)==mat[i-1][j] && !vis[i-1][j] && dfs(mat,vis,i-1,j,st,ind+1))
            return true;

        //down
        if(i+1<n && st.charAt(ind+1)==mat[i+1][j] && !vis[i+1][j] && dfs(mat,vis,i+1,j,st,ind+1))
            return true;

        vis[i][j] = false;
        return false;
    }
}